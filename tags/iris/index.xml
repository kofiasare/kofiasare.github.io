<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iris on Kofi A. Asare</title>
    <link>/tags/iris/</link>
    <description>Recent content in Iris on Kofi A. Asare</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 18 Oct 2018 16:12:14 +0000</lastBuildDate>
    
	<atom:link href="/tags/iris/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Responding To Cors Preflight Request in Go</title>
      <link>/blog/responding-to-cors-preflight-request-in-go/</link>
      <pubDate>Thu, 18 Oct 2018 16:12:14 +0000</pubDate>
      
      <guid>/blog/responding-to-cors-preflight-request-in-go/</guid>
      <description>Using the iris web framework, I created a middleware to respond to all cors preflight requests.
func corsMiddleware(ctx iris.Context) { var ( corsOrigin = ctx.GetHeader(&amp;#34;Origin&amp;#34;) corsMethod = ctx.GetHeader(&amp;#34;Access-Control-Request-Method&amp;#34;) corsHeaders = ctx.GetHeader(&amp;#34;Access-Control-Request-Headers&amp;#34;) isCorsPreflightRequest = (corsOrigin != &amp;#34;&amp;#34;) || (corsMethod != &amp;#34;&amp;#34;) || (corsHeaders != &amp;#34;&amp;#34;) ) if isCorsPreflightRequest { ctx.Header(&amp;#34;Access-Control-Allow-Origin&amp;#34;, corsOrigin) ctx.Header(&amp;#34;Access-Control-Allow-Methods&amp;#34;, corsMethod) ctx.Header(&amp;#34;Access-Control-Allow-Headers&amp;#34;, corsHeaders) ctx.Header(&amp;#34;Access-Control-Max-Age&amp;#34;, string(60*60*24)) if ctx.Request().Method == &amp;#34;OPTIONS&amp;#34; { ctx.StatusCode(200) return } } ctx.Next() } func main() { app := iris.</description>
    </item>
    
  </channel>
</rss>